Assignment Overview
This assignment focused on developing a client-server application using Java RMI (Remote Method Invocation) for communication. RMI allows us to interact with remote objects as if they were local, enabling method invocations and data exchange. It utilizes object serialization, dynamic class loading, and a security manager for secure data transfer. While multithreaded, RMI itself isn't thread-safe by default, requiring careful implementation for concurrent access. This project involved building a basic key-value store where the client could perform PUT, GET, GETALL, DELETE, and DELETEALL operations on the server's data. The core objective was to solidify our understanding of RMI, multithreading principles, and fundamental client-server architecture.


Technical Impression
This assignment provided valuable hands-on experience in implementing a distributed application using Java RMI. The implementation process involved:

1. Designing the remote interface
2. Creating the remote interface implementation
3. Compiling the implementation and generating skeleton objects
4. Register skeleton object in registry and create a stub object by using look up in registry.
5. Compiling and launching the server and client applications


Challenges Encountered:
- Code reusability: Challenges in properly defining the remote interface, and implementing it in such a way that I could use majority of my existing code and logic. 
- RMI registry: How to create a rmi registry and use it to register objects in it which will be then looked up at client side and used to perform desired action.
- Thread Safety: Implementing thread-safe functionality to handle concurrent client requests required careful consideration of synchronization mechanisms and utilizing concurrency control provided by Properties class in Java.

RMI and Thread Safety:
While RMI offers an inbuilt thread pool and can handle concurrent requests, it's crucial to ensure server-side data is synchronized when accessed by multiple clients. This is achieved by using the synchronized keyword in the functionality implementation methods, ensuring exclusive access to shared resources during modification. Additionally, Properties class provides a thread-safe object, offering fine-grained locking mechanisms.

Key Learnings:
This assignment significantly enhanced my understanding of distributed systems, RMI communication, and concurrent programming. Areas for potential improvement include optimizations for scalability and performance.

Overall:
This project provided a valuable learning experience, solidifying core concepts in RMI, multithreading, client-server communication, robust error handling and advanced logging mechanisms,. Future endeavors could focus on implementing the suggested improvements for a more scalable  and efficient application.

Note: 
The GET-ALL and DELETE-ALL functions are optional implementation from last make up assignments.
